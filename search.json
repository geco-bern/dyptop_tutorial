[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Global wetland and peatland modelling",
    "section": "",
    "text": "Overview\nThis tutorial explains and demonstrates a scalable wetland and peatland modelling approach, implemented by the Dynamical Peatland Model Based on TOPMODEL (DYPTOP) (Stocker, Spahni, and Joos 2014). The demonstration contrasts two regions, the extent around the central Congo Basin peatland complex (Figure 1) (Dargie et al. 2017), and Switzerland (Figure 2) in Chapter 2. Chapter 3 then demonstrates the application of the DYPTOP modelling approach at the global scale.\n\n\n\n\n\nFigure 1: Region used for demonstration around the Central Congo Basin peatland complex. The maps shows the Compound Topography Index (CTI), which measures the tendency for subsurface water flow convergence and a shallow water table depth (or flooding) based on the TOPMODEL (Beven and Kirkby 1979). CTI data is from Marthews et al. (2015).\n\n\n\n\n\n\n\n\n\nFigure 2: Regions used for demonstration around Switzerland. The maps shows the Compound Topography Index (CTI), which measures the tendency for subsurface water flow convergence and a shallow water table depth (or flooding) based on the TOPMODEL (Beven and Kirkby 1979). CTI data is from Marthews et al. (2015).\n\n\n\n\n\n \n\n\n\n\nBeven, K. J., and M. J. Kirkby. 1979. “A Physically Based, Variable Con- Tributing Area Model of Basin Hydrology.” Hydrol. Sci. J. 24 (1): 43–69. https://doi.org/DOI:10.1080/02626667909491834.\n\n\nDargie, Greta C., Simon L. Lewis, Ian T. Lawson, Edward T. A. Mitchard, Susan E. Page, Yannick E. Bocko, and Suspense A. Ifo. 2017. “Age, Extent and Carbon Storage of the Central Congo Basin Peatland Complex.” Nature 542 (7639): 86–90. https://doi.org/10.1038/nature21048.\n\n\nMarthews, T. R., S. J. Dadson, B. Lehner, S. Abele, and N. Gedney. 2015. “High-Resolution Global Topographic Index Values for Use in Large-Scale Hydrological Modelling.” Hydrology and Earth System Sciences 19 (1): 91–104. https://doi.org/10.5194/hess-19-91-2015.\n\n\nStocker, B. D., R. Spahni, and F. Joos. 2014. “DYPTOP: a cost-efficient TOPMODEL implementation to simulate sub-grid spatio-temporal dynamics of global wetlands and peatlands.” Geoscientific Model Development 7 (6): 3089–3110. https://doi.org/10.5194/gmd-7-3089-2014."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "DYPTOP provides a solution for treating sub-grid scale topography in determining the portion of a (global) model gridcell flooded as a function of the gridcell-average water table depth. Given the mean seasonal cycle of flooding and additional criteria related the the land surface water and carbon balances, DYPTOP determines whether a peatland can establish and grow, and it simulates its dynamic lateral expansion and contraction in a non-spatially explicit manner - always as a fraction of the (global) model gridcell.\nThe central challenge is to describe sub-grid scale relations for a larger domain. Dynamic Global Vegetation Models (DGVMs) commonly resolve the Earth’s land surface at a spatial resolution of 10-100 km. The water and carbon balances are simulated at this coarse resolution and for each gridcell. However, relations between the surface water balance and flooding are determined by the topography. Topographical variations arise at much smaller spatial scales than the common resolution of DGVMs - at 10-1000 m. Such small scales cannot be resolved for global modelling.\nThe approach taken by DYPTOP is to not consider the explicit spatial distribution of flooding within a model gridcell, but just to determine the gridcell’s area fraction that is flooded (\\(\\Psi_x\\)) as a function of the gridcell’s water table depth (\\(\\Gamma_x\\)). \\[\n\\Psi_x = f_x(\\Gamma_x)\n\\] In the following, we will denote quantities that are defined at the coarse model gridcell with a subscript \\(x\\). Above, \\(f_x\\) is an empirical relation, determined by a gridcell’s topography, and is thus specific for each gridcell (hence the subscript \\(x\\)).\nRemember that the water balance is simulated at the corse model gridcell and the water table thus represents an average across the coarse gridcell, without resolving topographic effects and lateral flow. \\(f_x(\\Gamma_x)\\)) is the central relation and is determined from information about the fine-scale topography within a coarse-scale model gridcell. The clue of the DYPTOP approach is to approximate it by a fitted curve that characterises the sub-grid scale relations without actually resolving them (\\(\\hat{f_x}(\\Gamma_x)\\)).\nThis approach is demonstrated in Chapter 2 for the two demo regions shown in Figure 1 and Figure 2."
  },
  {
    "objectID": "fflooded.html#the-topmodel",
    "href": "fflooded.html#the-topmodel",
    "title": "2  Flooded area fraction",
    "section": "2.1 The TOPMODEL",
    "text": "2.1 The TOPMODEL\nTOPMODEL (Beven and Kirkby 1979) defines the Compound Topography Index (CTI) for measuring subsurface water flow convergence at a given point within a catchment and that point’s tendency for a shallow water table depth and for getting flooded. It is defined for a point \\(i\\) as: \\[\n\\text{CTI}_i = \\ln(a_i / \\tan(\\beta_i)) \\;,\n\\] where \\(a_i\\) is the total area that drains into/through the respective point, and \\(\\beta_i\\) refers to the local slope. The TOPMODEL thus expresses that lateral flow redistributes water across the landscape and across topographical gradients such that for a certain portion of the catchment, the soil is fully water-saturated (here, considered as flooded). This portion depends on three quantities:\n\nThe topography within the catchment: Flat valley bottoms get flooded first. Hence, the distribution of CTI matters for determining the flooded area fraction for a given catchment water balance.\nThe average catchment water balance: The wetter the conditions, the more water is stored in the soil and subsurface, and the higher the larger the catchment’s area fraction for which the soil is at saturation. In Equation 2.1, this is expressed as the water table depth \\(\\Gamma\\).\nThe structure of the soil and subsurface, expressed as the rate of decline of saturated hydraulic conductivity with depth. In Equation 2.1, this is represented by the parameter \\(M\\).\n\nCTI can be derived from a digital elevation model and is provided at topography-resolving spatial resolution. Figure 1 and Figure 2 show the spatial distribution of CTI values at 15 arcsec resolution and is provided by Marthews et al. (2015) . Let’s refer to each pixel in these images as pixel, also using the underscore \\(i\\).\nTOPMODEL defines a critical CTI value \\(\\text{CTI}_x^\\ast\\), above which a pixel is flooded: \\[\n\\text{CTI}_x^\\ast = \\overline{\\text{CTI}}_x - M\\cdot\\Gamma_x\n\\tag{2.1}\\] \\(\\overline{\\text{CTI}}_x\\) is the catchment-scale mean CTI. (For other quantities, see above.). Note that all these quantities are representative for the catchment-scale, as expressed by the subscript \\(x\\).\nThe basic unit of a DGVM is a (coarse-scale) gridcell - not a catchment. In DYPTOP, Equation 2.1 is thus re-interpreted for representing these relations within a gridcell.\nTo summarise, the distribution of CTI values within a larger spatial domain (e.g., a DGVM gridcell) is key for determining the flooded area fraction. Hence, let’s look at this distribution for our demo regions."
  },
  {
    "objectID": "fflooded.html#distribution-of-cti-values",
    "href": "fflooded.html#distribution-of-cti-values",
    "title": "2  Flooded area fraction",
    "section": "2.2 Distribution of CTI values",
    "text": "2.2 Distribution of CTI values\n\n\nCode\n# congo\nfile_path &lt;- here(\"data/ga2_congo.nc\")\nrasta_cti &lt;- rast(file_path)\nbounding_box &lt;- c(15,22,-3,3) # c(15,20,-2,3)  # max bb:  c(15,22,-3,3)\nrasta_cti_cropped &lt;- crop(rasta_cti, ext(bounding_box))\n\ndf_cti_congo &lt;- as_tibble(rasta_cti_cropped, xy = TRUE, na.rm = TRUE) |&gt;\n  setNames(c(\"lon\", \"lat\", \"cti\"))\n\ngg1 &lt;- df_cti_congo |&gt;\n  ggplot(aes(cti, ..density..)) +\n  geom_density(color = \"tomato\") +\n  labs(title = \"Congo\", x = \"CTI\", y = \"density\") +\n  theme_classic() +\n  xlim(0, NA)\n\ngg2 &lt;- df_cti_congo |&gt;\n  ggplot(aes(x = cti)) +\n  stat_ecdf(geom = \"step\", color = \"tomato\") +  # ECDF plot\n  labs(x = \"CTI\",\n       y = \"Cumulative density\",\n       title = \" \") +\n  theme_classic() +\n  xlim(0, NA)\n\n# switzerland\nfile_path &lt;- here(\"data/ga2_switzerland.nc\")\nbounding_box &lt;- c(xmin = 6, xmax = 10.5, ymin = 45.81799, ymax = 47.80838)\nrasta_cti &lt;- rast(file_path)\nrasta_cti_cropped &lt;- crop(rasta_cti, ext(bounding_box))\n\ndf_cti_switzerland &lt;- as_tibble(rasta_cti_cropped, xy = TRUE, na.rm = TRUE) |&gt;\n  setNames(c(\"lon\", \"lat\", \"cti\"))\n\ngg3 &lt;- df_cti_switzerland |&gt;\n  ggplot(aes(cti, ..density..)) +\n  geom_density(color = \"tomato\") +\n  labs(title = \"Switzerland\", x = \"CTI\", y = \"density\") +\n  theme_classic() +\n  xlim(0, NA)\n\ngg4 &lt;- df_cti_switzerland |&gt;\n  ggplot(aes(x = cti)) +\n  stat_ecdf(geom = \"step\", color = \"tomato\") +  # ECDF plot\n  labs(x = \"CTI\",\n       y = \"Cumulative density\",\n       title = \" \") +\n  theme_classic() +\n  xlim(0, NA)\n\ncowplot::plot_grid(gg1, gg2, gg3, gg4, ncol = 2)\n\n\n\n\n\nFigure 2.1: Density and cumulative density distributions for the two demo regions."
  },
  {
    "objectID": "fflooded.html#flooded-pixels",
    "href": "fflooded.html#flooded-pixels",
    "title": "2  Flooded area fraction",
    "section": "2.3 Flooded pixels",
    "text": "2.3 Flooded pixels\nLet’s determine the critical CTI threshold (\\(\\mathrm{CTI}_x^\\ast\\)) above which a pixel is flooded for a given water table depth (here -0.2 m) and for the two demo regions. for the Congo basin, assuming that the extent shown in the figure above corresponds to one catchment.\n\nm_par &lt;- 8.0  # Stocker et al., 2014, Table 1\nwtd &lt;- -0.2   # m\n\ncalc_cti_crit &lt;- function(vec_cti, wtd, m_par){\n  mean(vec_cti) - m_par * wtd\n}\n\n# Congo\ncti_crit_congo &lt;- calc_cti_crit(df_cti_congo$cti, wtd, m_par)\ncti_crit_congo\n\n[1] 8.199371\n\n# switzerland\ncti_crit_switzerland &lt;- calc_cti_crit(df_cti_switzerland$cti, wtd, m_par)\ncti_crit_switzerland\n\n[1] 5.441784\n\n\nNext, let’s determine the fraction of flooded pixels, given \\(\\mathrm{CTI}_x^\\ast\\).\n\ncalc_fflooded &lt;- function(vec_cti, cti_crit){\n  length(vec_cti[vec_cti &gt; cti_crit])/length(vec_cti)\n}\n\n# Congo\nfflooded_congo &lt;- calc_fflooded(df_cti_congo$cti, cti_crit_congo)\nfflooded_congo\n\n[1] 0.1971743\n\n# Switzerland\nfflooded_switzerland &lt;- calc_fflooded(df_cti_switzerland$cti, cti_crit_switzerland)\nfflooded_switzerland\n\n[1] 0.2028614\n\n\nGraphically, this relates to the cumulative density distribution function of CTI within the two domains.\n\n\nCode\ngg1 &lt;- df_cti_congo |&gt;\n  ggplot(aes(x = cti)) +\n  stat_ecdf(geom = \"step\", color = \"tomato\") +  # ECDF plot\n  geom_vline(xintercept = cti_crit_congo, linetype = \"dotted\") +\n  geom_hline(yintercept = 1 - fflooded_congo, linetype = \"dotted\") +\n  labs(title = \"Congo\",\n       x = \"CTI\",\n       y = \"Cumulative density\") +\n  theme_classic() +\n  xlim(0, NA)\n\ngg2 &lt;- df_cti_switzerland |&gt;\n  ggplot(aes(x = cti)) +\n  stat_ecdf(geom = \"step\", color = \"tomato\") +  # ECDF plot\n  geom_vline(xintercept = cti_crit_switzerland, linetype = \"dotted\") +\n  geom_hline(yintercept = 1 - fflooded_switzerland, linetype = \"dotted\") +\n  labs(title = \"Switzerland\",\n       x = \"CTI\",\n       y = \"Cumulative density\") +\n  theme_classic() +\n  xlim(0, NA)\n\ncowplot::plot_grid(gg1, gg2, ncol = 2)\n\n\n\n\n\nFigure 2.2: Density and cumulative density distributions for the two demo regions with the critical CTI for a given water table depth indicated by the vertical dotted line. The intersection of the cumulative density distribution and the critical critical CTI indicates the flooded area fraction.\n\n\n\n\nNote that the flooded area fraction corresponds to one minus the value of the cumulative density at \\(\\mathrm{CTI}_x^\\ast\\).\nTo recap, for the water table depth specified above (variable wtd), TOPMODEL assumes that all pixels with a CTI above \\(\\mathrm{CTI}_x^\\ast\\) (cti_crit in code) are at saturation. The flooded area fraction is thus determined by the cumulative density distribution of all pixels’ CTI.\nThe spatial distribution of flooded areas can be visualised by simply masking values above \\(\\mathrm{CTI}_x^\\ast\\):\n\n# congo\nfile_path &lt;- here(\"data/ga2_congo.nc\")\nbounding_box &lt;- c(15,22,-3,3)\nmap_congo &lt;- plot_map(file_path, bounding_box, cti_crit = cti_crit_congo, show_legend = TRUE, show_inset = FALSE)\nggsave(here(\"book/images/map_congo_flooded.png\"), plot = map_congo, width = 8, height = 8)\n\n# switzerland\nfile_path &lt;- here(\"data/ga2_switzerland.nc\")\nbounding_box &lt;- c(xmin = 6, xmax = 10.5, ymin = 45.81799, ymax = 47.80838)\nmap_switzerland &lt;- plot_map(file_path, bounding_box, cti_crit = cti_crit_switzerland, show_legend = TRUE, show_inset = FALSE)\nggsave(here(\"book/images/map_switzerland_flooded.png\"), plot = map_switzerland, width = 8, height = 5)\n\n\n\n\n\n\nFigure 2.3: Distribution of flooding in Congo for a given water table depth. Flooded pixels are in blue.\n\n\n\n\n\n\n\n\n\nFigure 2.4: Distribution of flooding in Switzerland for a given water table depth. Flooded pixels are in blue."
  },
  {
    "objectID": "fflooded.html#flooding-vs.-water-table-depth",
    "href": "fflooded.html#flooding-vs.-water-table-depth",
    "title": "2  Flooded area fraction",
    "section": "2.4 Flooding vs. water table depth",
    "text": "2.4 Flooding vs. water table depth\nFor large-scale modelling, we want to calculate the flooded area fraction of a gridcell as a function of the water table depth. Following the steps above, this corresponds to first calculating the critical CTI as a function of the water table depth and then to determine the flooded area fraction as a function of the critical CTI. To implement this, we can combine the functions calc_cti_crit() and calc_fflooded() to express the flooded area fraction as a function of the gridcell mean water table depth - corresponding to the relation shown in Fig. 2 of Stocker, Spahni, and Joos (2014).\n\ncalc_fflooded_wtd &lt;- function(wtd, vec_cti, m_par){\n  cti_crit &lt;- calc_cti_crit(vec_cti, wtd, m_par)\n  fflooded &lt;- calc_fflooded(vec_cti, cti_crit)\n  return(fflooded)\n}\n\n\n\nCode\n# Congo\ndf_wtd_congo &lt;- tibble(wtd = seq(-1, 1, by = 0.01)) |&gt;\n  rowwise() |&gt;\n  mutate(fflooded = calc_fflooded_wtd(wtd, df_cti_congo$cti, m_par))\n\ngg1 &lt;- df_wtd_congo |&gt;\n  ggplot(aes(wtd, fflooded)) +\n  geom_line() +\n  theme_classic() +\n  labs(title = \"Congo\", x = \"Water table depth (m)\", y = \"Flooded fraction\")\n\n# Switzerland\ndf_wtd_switzerland &lt;- tibble(wtd = seq(-1, 1, by = 0.01)) |&gt;\n  rowwise() |&gt;\n  mutate(fflooded = calc_fflooded_wtd(wtd, df_cti_switzerland$cti, m_par))\n\ngg2 &lt;- df_wtd_switzerland |&gt;\n  ggplot(aes(wtd, fflooded)) +\n  geom_line() +\n  theme_classic() +\n  labs(title = \"Switzerland\", x = \"Water table depth (m)\", y = \"Flooded fraction\")\n\nplot_grid(gg1, gg2, ncol = 2)\n\n\n\n\n\nFigure 2.5: Relationship of the flooded area fraction and the average water table depth across demo regions.\n\n\n\n\nThe relationship shown in Figure 2.5 is determined from the distribution of CTI values within the respective domains. To determine this, the full information of CTI values at the fine resolution is required. In the context of global modelling, this is prohibitively data-intensive. Therefore, the “empirical” relationship is approximated in DYPTOP by an asymmetric sigmoid function \\(\\Psi\\):\n\\[\n\\Psi_x(\\Gamma_x) = \\left( 1 + v_x\\;e^{-k_x\\;(\\Gamma_x - q_x)} \\right)^{-1/v_x}\n\\tag{2.2}\\]\nThis function has just three parameters. When applied, for example, for the domain of the Central Congo Basin, 2.4 mio. CTI values (one for each pixel) are reduced to just three values (one for each parameter). Of course, the explicit spatial information is lost. However, this information is not used for global modelling as it is beyond the spatial resolution and since we are only interested in the flooded gridcell fraction.\nThe following code implements the assymetric sigmoid function and the fitting of the three parameters, characteristic for the respective domain.\n\n\nCode\nassymmetric_sigmoid &lt;- function(x, par){\n  ( 1 + par[\"v\"] * exp(-par[\"k\"] * (x - par[\"q\"])))^(-1/par[\"v\"])\n}\n\n# Generate example data\nset.seed(1982)  # For reproducibility\n\n# Define the loss function (SSE)\nloss_function &lt;- function(params, x, y) {\n  par &lt;- setNames(params, c(\"v\", \"k\", \"q\"))  # Name parameters\n  y_pred &lt;- assymmetric_sigmoid(x, par)  # Compute predictions\n  sum((y - y_pred)^2)  # Sum of squared errors\n}\n\n# Initial guesses for parameters\ninit_params &lt;- c(v = 1, k = 0.5, q = 4)\n\n# Congo\n# Optimization using optimx\nfit_congo &lt;- optimx(\n  par = init_params, \n  fn = loss_function, \n  x = df_wtd_congo$wtd, \n  y = df_wtd_congo$fflooded, \n  method = \"BFGS\"\n  )\n\n# Extract best parameters\nbest_params &lt;- coef(fit_congo)[1, ]\nv_est_congo &lt;- best_params[\"v\"]\nk_est_congo &lt;- best_params[\"k\"]\nq_est_congo &lt;- best_params[\"q\"]\n\n# Compute fitted values\ndf_congo &lt;- data.frame(\n  x = df_wtd_congo$wtd,\n  y_obs = df_wtd_congo$fflooded,\n  y_fit = assymmetric_sigmoid(df_wtd_congo$wtd, best_params)\n)\n\n# Plot results\ngg1 &lt;- ggplot(df_congo, aes(x = x)) +\n  geom_point(aes(y = y_obs), color = \"grey20\", size = 2, alpha = 0.6) +  # Observations\n  geom_line(aes(y = y_fit), color = \"tomato\", linewidth = 1) +  # Fitted curve\n  labs(title = \"Congo\",\n       subtitle = paste(\"Estimated v =\", round(v_est_congo, 2), \n                        \"k =\", round(k_est_congo, 2),\n                        \"q =\", round(q_est_congo, 2)),\n       x = \"Water table depth (m)\", y = \"Flooded fraction\") +\n  theme_classic()\n\n# Switzerland\n# Optimization using optimx\nfit_switzerland &lt;- optimx(\n  par = init_params, \n  fn = loss_function, \n  x = df_wtd_switzerland$wtd, \n  y = df_wtd_switzerland$fflooded, \n  method = \"BFGS\"\n  )\n\n# Extract best parameters\nbest_params &lt;- coef(fit_switzerland)[1, ]\nv_est_switzerland &lt;- best_params[\"v\"]\nk_est_switzerland &lt;- best_params[\"k\"]\nq_est_switzerland &lt;- best_params[\"q\"]\n\n# Compute fitted values\ndf_switzerland &lt;- data.frame(\n  x = df_wtd_switzerland$wtd,\n  y_obs = df_wtd_switzerland$fflooded,\n  y_fit = assymmetric_sigmoid(df_wtd_switzerland$wtd, best_params)\n)\n\n# Plot results\ngg2 &lt;- ggplot(df_switzerland, aes(x = x)) +\n  geom_point(aes(y = y_obs), color = \"grey20\", size = 2, alpha = 0.6) +  # Observations\n  geom_line(aes(y = y_fit), color = \"tomato\", linewidth = 1) +  # Fitted curve\n  labs(title = \"Switzerland\",\n       subtitle = paste(\"Estimated v =\", round(v_est_switzerland, 2), \n                        \"k =\", round(k_est_switzerland, 2),\n                        \"q =\", round(q_est_switzerland, 2)),\n       x = \"Water table depth (m)\", y = \"Flooded fraction\") +\n  theme_classic()\n\nplot_grid(gg1, gg2, ncol = 2)\n\n\n\n\n\nFigure 2.6: Fitting the empirical relationship between the water table depth and the flooded area fraction for the two demo regions. The fitted assymetric sigmoid function is given by the red line.\n\n\n\n\nThe three parameters \\(v, k, q\\) can be fitted for each coarse-resolution model gridcell. Thus, the relationship between the (gridcell average) water table depth and the flooded gridcell area fraction is specified, and the sigmoid function (Equation 2.2) can be used for dynamically simulating flooding in large scale simulations of the surface water balance (e.g., in a DGVM or a land surface model).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBeven, K. J., and M. J. Kirkby. 1979. “A Physically Based, Variable Con- Tributing Area Model of Basin Hydrology.” Hydrol. Sci. J. 24 (1): 43–69. https://doi.org/DOI:10.1080/02626667909491834.\n\n\nMarthews, T. R., S. J. Dadson, B. Lehner, S. Abele, and N. Gedney. 2015. “High-Resolution Global Topographic Index Values for Use in Large-Scale Hydrological Modelling.” Hydrology and Earth System Sciences 19 (1): 91–104. https://doi.org/10.5194/hess-19-91-2015.\n\n\nStocker, B. D., R. Spahni, and F. Joos. 2014. “DYPTOP: a cost-efficient TOPMODEL implementation to simulate sub-grid spatio-temporal dynamics of global wetlands and peatlands.” Geoscientific Model Development 7 (6): 3089–3110. https://doi.org/10.5194/gmd-7-3089-2014."
  },
  {
    "objectID": "wetlands.html#water-table-depth",
    "href": "wetlands.html#water-table-depth",
    "title": "3  Global wetlands",
    "section": "3.1 Water table depth",
    "text": "3.1 Water table depth\nWe’re using outputs from the LPX-Bern simulations that were contributed to the GCP2021 Methane Budget. Simulations were forced by CRU monthly climate time series. The water table depth is simulated in LPX-Bern in a not-very-explicit manner to overcome the limitation implied by the free-drainage assumption. Figure 3.1 shows the simulated water table depth for months January and July.\n\n# read water table depth outputs\n# open raster\nrasta_wtd &lt;- rast(here(\"data/LPX-Bern_DYPTOP_vars_1990-2020_1x1deg_m_MONMEAN.nc\"))\n\n# extract data\ndf_wtd &lt;- as.data.frame(rasta_wtd, xy = TRUE, na.rm = TRUE) |&gt; \n  as_tibble()\n\n# Rename columns for clarity\ncolnames(df_wtd) &lt;- c(\"lon\", \"lat\", paste0(\"month_\", 1:12))\n\n# Convert from wide to long format (tidy)\ndf_wtd &lt;- df_wtd |&gt; \n  pivot_longer(cols = starts_with(\"month_\"), names_to = \"month\", values_to = \"wtd\") |&gt; \n  mutate(month = as.integer(gsub(\"month_\", \"\", month)))  # Extract month number\n\n\n\nCode\n# load global coastline data\nworld &lt;- ne_coastline(scale = \"small\", returnclass = \"sf\")\n\n# January\nwtd_jan &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_wtd |&gt; filter(month == 1), \n    aes(x = lon, y = lat, fill = wtd),\n    show.legend = TRUE\n    ) +\n  scale_fill_lapaz(reverse = TRUE, name = \"WTD (mm)\") +  # Reverse the \"lapaz\" color scale\n  theme_void() +\n  theme(\n    legend.position = \"right\", # Position the legend at the bottom of the plot\n    legend.title = element_text(size = 10), # Adjust title font size\n    legend.text = element_text(size = 8),    # Adjust legend text size\n    panel.background = element_rect(fill = \"grey70\", color = NA)\n  ) +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.01) +  # Continent outlines\n  ylim(-55, 80) +\n  labs(title = \"January\")\n\n# July\nwtd_jul &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_wtd |&gt; filter(month == 7), \n    aes(x = lon, y = lat, fill = wtd)\n    ) +\n  scale_fill_lapaz(reverse = TRUE, name = \"WTD (mm)\") +  # Reverse the \"lapaz\" color scale\n  theme_void() +\n  theme(\n    legend.position = \"right\", # Position the legend at the bottom of the plot\n    legend.title = element_text(size = 10), # Adjust title font size\n    legend.text = element_text(size = 8),    # Adjust legend text size\n    panel.background = element_rect(fill = \"grey70\", color = NA)\n  ) +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.01) +  # Continent outlines\n  ylim(-55, 80) +\n  labs(title = \"July\")\n\nplot_grid(wtd_jan, wtd_jul, ncol = 1)\n\n\n\n\n\nFigure 3.1: Water table depth for months January and July from simulations with the LPX-Bern model."
  },
  {
    "objectID": "wetlands.html#topmodel-parameters",
    "href": "wetlands.html#topmodel-parameters",
    "title": "3  Global wetlands",
    "section": "3.2 TOPMODEL parameters",
    "text": "3.2 TOPMODEL parameters\nTo apply Equation 2.2 to each gridcell globally for calculating the flooded area fraction, the parameters \\((k, v, q)\\) need to be known for each of the coarse-scale model gridcells. As desribed in the previous Chapter, they are derived from the sub-grid scale topography. Note that, in contrast to \\((k, v, q)\\), the TOPMODEL parameter \\(M\\) is globally uniform, and was set to 8 by Stocker, Spahni, and Joos (2014). Note also that the global field of \\((k, v, q)\\) is temporally static, as it merely represents topography. Hence, once calculated, they can be re-used within any large-scale land surface or vegetation modelling framework. Let’s look at the global pattern of them.\n\n# read all variables (topmodel parameters) from the file\nrasta_pars &lt;- rast(here(\"data/params_topmodel_M8_C12_filled_1x1deg.nc\"))\n\nvar_names &lt;- names(rasta_pars)\n\n# Create an empty list to store data frames for each variable\ntidy_data_list &lt;- list()\n\n# Loop through each variable and convert it to a tidy data frame\nfor (var in var_names) {\n  # Extract the variable as a raster\n  var_raster &lt;- rasta_pars[[var]]\n  \n  # Convert to a tidy data frame\n  var_df &lt;- as.data.frame(var_raster, xy = TRUE) %&gt;%\n    rename(lon = x, lat = y, value = var) %&gt;%\n    mutate(variable = var)  # Add a column for the variable name\n  \n  # Append the data frame to the list\n  tidy_data_list[[var]] &lt;- var_df\n}\n\n# Combine all data frames into one tidy data frame\ndf_pars &lt;- bind_rows(tidy_data_list) |&gt; \n  as_tibble()\n\n\n\nCode\ngg1 &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_pars |&gt; filter(variable == \"K_PAR\"), \n    aes(x = lon, y = lat, fill = value)\n    ) +\n  scale_fill_batlowK(reverse = TRUE, name = \"K\") + \n  theme_void() +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.01) +  # Continent outlines\n  ylim(-55, 80)\n\ngg2 &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_pars |&gt; filter(variable == \"XM_PAR\"), \n    aes(x = lon, y = lat, fill = value)\n    ) +\n  scale_fill_batlowK(reverse = TRUE, name = \"Q\") +  # ? (XM_PAR)\n  theme_void() +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.01) +  # Continent outlines\n  ylim(-55, 80)\n\ngg3 &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_pars |&gt; filter(variable == \"V_PAR\"), \n    aes(x = lon, y = lat, fill = value)\n    ) +\n  scale_fill_batlowK(reverse = TRUE, name = \"V\") + \n  theme_void() +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.01) +  # Continent outlines\n  ylim(-55, 80)\n\ngg4 &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_pars |&gt; filter(variable == \"MAXF\"), \n    aes(x = lon, y = lat, fill = value)\n    ) +\n  scale_fill_batlowK(reverse = TRUE, name = \"K\") + \n  theme_void() +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.01) +  # Continent outlines\n  ylim(-55, 80)\n\nplot_grid(gg1, gg2, gg3, gg4, ncol = 2)\n\n\n\n\n\nFigure 3.2: Global distributions of TOPMODEL parameters v, k, q (Equation 2.2). Additionally, the global distribution of the maximum floodable area fraction is shown."
  },
  {
    "objectID": "wetlands.html#flooded-area-fraction",
    "href": "wetlands.html#flooded-area-fraction",
    "title": "3  Global wetlands",
    "section": "3.3 Flooded area fraction",
    "text": "3.3 Flooded area fraction\nThe data loaded above contains the water table depth for each month of a mean seasonal cycle. In combination with the TOPMODEL parameters, we can now apply Equation 2.2 to calculate the flooded area fraction for each month of a mean seasonal cycle.\nTo calculate the flooded area fraction as a function of the monthly varying water table depth for each gridcell, we need to merge the data frames.\n\n# merge data frames for water table depth and topmodel parameters \ndf_wtd_fflooded &lt;- df_wtd |&gt; \n  left_join(\n    df_pars |&gt; \n      pivot_wider(\n        names_from = \"variable\",\n        values_from = \"value\"\n      ),\n    by = join_by(\"lon\", \"lat\")\n  )\n\nNow apply the assymetric sigmoid function, using the parameters and the water table depth as the argument.\n\nassymmetric_sigmoid &lt;- function(x, k_par, xm_par, v_par, maxf){\n  min(maxf, (1 + v_par * exp(-k_par * (x/1000 - xm_par)))^(-1/v_par))\n}\n\ndf_wtd_fflooded &lt;- df_wtd_fflooded |&gt; \n  rowwise() |&gt; \n  mutate(fflooded = assymmetric_sigmoid(wtd, K_PAR, XM_PAR, V_PAR, MAXF))\n\n# save for use in next chapter\nwrite_csv(df_wtd_fflooded, file = here(\"data/df_wtd_fflooded.csv\"))\n\nPlot it for January and July again.\n\n\nCode\n# January\nfflooded_jan &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_wtd_fflooded |&gt; filter(month == 1), \n    aes(x = lon, y = lat, fill = fflooded),\n    show.legend = TRUE\n    ) +\n  scale_fill_lapaz(reverse = TRUE, name = \"fraction \\nflooded\") +  # Reverse the \"lapaz\" color scale\n  theme_void() +\n  theme(\n    legend.position = \"right\", # Position the legend at the bottom of the plot\n    legend.title = element_text(size = 10), # Adjust title font size\n    legend.text = element_text(size = 8),    # Adjust legend text size\n    panel.background = element_rect(fill = \"grey70\", color = NA)\n  ) +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.01) +  # Continent outlines\n  ylim(-55, 80) +\n  labs(title = \"January\")\n\n# July\nfflooded_jul &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_wtd_fflooded |&gt; filter(month == 7), \n    aes(x = lon, y = lat, fill = fflooded)\n    ) +\n  scale_fill_lapaz(reverse = TRUE, name = \"fraction \\nflooded\") +  # Reverse the \"lapaz\" color scale\n  theme_void() +\n  theme(\n    legend.position = \"right\", # Position the legend at the bottom of the plot\n    legend.title = element_text(size = 10), # Adjust title font size\n    legend.text = element_text(size = 8),    # Adjust legend text size\n    panel.background = element_rect(fill = \"grey70\", color = NA)\n  ) +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.01) +  # Continent outlines\n  ylim(-55, 80) +\n  labs(title = \"July\")\n\nplot_grid(fflooded_jan, fflooded_jul, ncol = 1)\n\n\n\n\n\nFigure 3.3: Flooded area fraction for months January and July."
  },
  {
    "objectID": "wetlands.html#wetland-area-fraction",
    "href": "wetlands.html#wetland-area-fraction",
    "title": "3  Global wetlands",
    "section": "3.4 Wetland area fraction",
    "text": "3.4 Wetland area fraction\nDefine the wetland area fraction as the area that is flooded at least during three months of the year.\n\nget_wetland_fraction &lt;- function(df, min_months = 3){\n  df |&gt; \n    arrange(desc(fflooded)) |&gt; \n    slice(min_months) |&gt; \n    pull(fflooded) |&gt; \n    min()\n}\n\ndf_wetland &lt;- df_wtd_fflooded |&gt; \n  select(lon, lat, month, fflooded) |&gt; \n  group_by(lon, lat) |&gt; \n  nest() |&gt; \n  mutate(fwetland = purrr::map_dbl(data, ~get_wetland_fraction(.))) |&gt; \n  select(-data)\n\n\n\nCode\nggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_wetland, \n    aes(x = lon, y = lat, fill = fwetland)\n    ) +\n  scale_fill_lapaz(reverse = TRUE, name = \"fraction \\nwetland\") +  # Reverse the \"lapaz\" color scale\n  theme_void() +\n  theme(\n    legend.position = \"right\", # Position the legend at the bottom of the plot\n    legend.title = element_text(size = 10), # Adjust title font size\n    legend.text = element_text(size = 8),    # Adjust legend text size\n    panel.background = element_rect(fill = \"grey70\", color = NA)\n  ) +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.01) +  # Continent outlines\n  ylim(-55, 80)\n\n\n\n\n\nFigure 3.4: Wetland area fraction.\n\n\n\n\n\n\n\n\nStocker, B. D., R. Spahni, and F. Joos. 2014. “DYPTOP: a cost-efficient TOPMODEL implementation to simulate sub-grid spatio-temporal dynamics of global wetlands and peatlands.” Geoscientific Model Development 7 (6): 3089–3110. https://doi.org/10.5194/gmd-7-3089-2014."
  },
  {
    "objectID": "peatlands.html#sec-criteria",
    "href": "peatlands.html#sec-criteria",
    "title": "4  Global peatlands",
    "section": "4.1 Peatland criteria",
    "text": "4.1 Peatland criteria\nIn DYPTOP, the potential peatland area fraction is modelled as the simulated wetland area fraction. This potential area is attained if additional criteria are satisfied. Criteria relate to the hydroclimate and the C balance. Specifically, criteria that must be fulfilled are:\n\nHydroclimate: A positive average ecosystem water balance: The ratio of mean annual precipitation over mean annual potential evapotranspiration is required to be greater than 1:\n\n\\[\nP/\\text{PET} &gt; 1\n\\]\n\nSoil carbon: There must ba a long-term accumulation of C in the catothelm - the peat soil layer that remains water-logged. This criteria reflects the balance of vegetation productivity and litter production vs. the rate of decomposition of dead organic matter. The threshold chosen in DYPTOP is:\n\n\\[\n\\frac{dC_\\text{peat}}{dt} &gt; 10 \\; \\text{gCm}^{-2}\\text{yr}^{-1}\n\\]\n\nSoil carbon: If the C accumulation criterion is not fulfilled, a gridcell is still classified as peatland if the remaining C stored as soil organic matter in the catothelm is above a certain threshold, chosen as:\n\n\\[\nC_\\text{peat} &gt; 50 \\; \\text{kgCm}^{-2}\n\\]\nNote that DYPTOP was implemented by Stocker, Spahni, and Joos (2014) within the LPX-Bern Dynamic Global Vegetation Model (DGVM). Vegetation processes and the carbon and water balances are simulated in DGVMs for each gridcell and separately for multiple tiles within each gridcell. This tiling structure is common for resolving sub-grid scale heterogeneity and distinct representations of processes and mass balances within different landscape elements. Commonly, land use classes are distinguished (e.g., croplands, pastures, urban land, non-agricultural land). Similarly, peatland processes and mass balances are treated separately and the peatland area fraction is represented by its own tile within gridcells.\n\n4.1.1 Hydroclimate\nFigure 4.1 shows the global distribution of P/PET. Here, we use data from Zomer, Xu, and Trabucco (2022). P/PET is sometimes (inappropriately) referred to as the aridity index. Let’s rather call it the moisture index.\n\n\nCode\nrasta_p_over_pet &lt;- rast(here(\"data/aridityindex_p_over_pet_zomeretal2022_v3_yr_1x1deg.nc\"))\n\n# resample to the same grid as files above\n# Load the target raster (the reference grid)\ntarget_raster &lt;- rast(\"~/dyptop_tutorial/data/params_topmodel_M8_C12_filled_1x1deg.nc\")\n\n# Regrid: Resample source raster to match the grid of the target raster\nrasta_p_over_pet_regr &lt;- resample(rasta_p_over_pet, target_raster, method = \"bilinear\")  # Options: \"bilinear\", \"near\", \"cubic\"\n\n# create meaningful breaks, see https://geco-bern.github.io/les/ecohydrology.html#sec-budyko\nbreaks &lt;- c(0, 0.03, 0.1, 0.2, 0.3, 0.4, 0.5, 0.65, 0.8, 1, 1.2, 1.6, 2, 2.5, 3, Inf)\n\n# bin values to get a discrete color scale (personal preference)\nrasta_p_over_pet_bin &lt;- rasta_p_over_pet\n\nvalues(rasta_p_over_pet_bin) &lt;- cut(\n  values(rasta_p_over_pet),\n  breaks = breaks, \n  right = FALSE\n)\n\n# get coast outlines\nlayer_coast &lt;- rnaturalearth::ne_coastline(\n  scale = 110, \n  returnclass = \"sf\"\n  )\n\n# get ocean layer\nlayer_ocean &lt;- rnaturalearth::ne_download(\n  scale = 110,\n  type = \"ocean\",\n  category = \"physical\",\n  returnclass = \"sf\",\n  destdir = here::here(\"data/\")\n)\n\n\nReading layer `ne_110m_ocean' from data source \n  `/Users/benjaminstocker/dyptop_tutorial/data/ne_110m_ocean.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -180 ymin: -85.60904 xmax: 180 ymax: 90\nGeodetic CRS:  WGS 84\n\n\nCode\n# construct map\nggmap &lt;- ggplot() +\n  \n  # aridity index raster\n  tidyterra::geom_spatraster(\n    data = rasta_p_over_pet_bin,\n    show.legend = FALSE\n    ) +\n  \n  # coastline\n  geom_sf(\n    data = layer_coast,\n    colour = 'black',\n    linewidth = 0.1\n  ) +\n  \n  # ocean to mask zeros\n  geom_sf(\n    data = layer_ocean,\n    color = NA,\n    fill = \"azure3\"\n    ) +\n  \n  # color palette from the khroma package\n  scale_fill_roma(discrete = TRUE, name = \"\")  +\n  coord_sf(\n    ylim = c(-60, 85),\n    expand = FALSE   # to draw map strictly bounded by the specified extent\n  ) +\n  xlab('') +\n  ylab('') +\n  theme_bw() +\n  theme(axis.ticks.y.right = element_line(),\n        axis.ticks.x.top = element_line(),\n        panel.grid = element_blank(),\n        plot.background = element_rect(fill = \"white\")\n  )\n\ngglegend &lt;- plot_discrete_cbar(\n  breaks = breaks,\n  colors = c(khroma::color(\"roma\")(length(breaks)-1)),\n  legend_title = \"\",\n  legend_direction = \"vertical\",\n  width = 0.03,\n  font_size = 3,\n  expand_size_y = 0.5,\n  spacing = \"constant\"\n)\n\ncowplot::plot_grid(ggmap, gglegend, ncol = 2, rel_widths = c(1, 0.10))\n\n\n\n\n\nFigure 4.1: Global distribution of P/PET. Data from Zomer, Xu, and Trabucco (2022). The color scale is chosen to relate to commonly used aridity classes, see here.\n\n\n\n\n\n\n4.1.2 Soil carbon\nLet’s read outputs for the simulated soil C in the peatlands from the same global simulation with the LPX-Bern model, as used for Chapter 3.\n\n# read water table depth outputs\n# open raster\nrasta_soilc &lt;- rast(here(\"data/LPX-Bern_DYPTOP_vars_1990-2020_1x1deg_SOILC.nc\"))\n\n# extract data\ndf_soilc &lt;- as.data.frame(rasta_soilc, xy = TRUE, na.rm = TRUE) |&gt; \n  as_tibble()\n\n# Data data is oddly organised in the NetCDF file. We therefore have to apply an\n# additional step for re-organising it into a tidy format.\n# Rename columns for clarity\ncolnames(df_soilc) &lt;- c(\"lon\", \"lat\", paste0(\"year_\", 1990:2020))\n\n# Convert from wide to long format (tidy)\ndf_soilc &lt;- df_soilc |&gt; \n  pivot_longer(cols = starts_with(\"year_\"), names_to = \"year\", values_to = \"soilc\") |&gt; \n  mutate(year = as.integer(gsub(\"year_\", \"\", year)))  # Extract year\n\nFor determining the second criterion described above, we have to calculate the change rate of soil C over the 31 years. We do so by fitting a linear regression line and using its slope as a measure for the average change rate \\(dC_\\text{peat}/dt\\). The third criterion is simply calculated by getting the mean for each gridcell.\n\nget_changerate &lt;- function(df){\n  linmod &lt;- lm(soilc ~ year, data = df)  # Fit linear model: value ~ time\n  coef(linmod)[2]                        # Extract slope (change rate)\n}\n\nget_mean &lt;- function(df){\n  mean(df$soilc)\n}\n\ndf_soilc_nested &lt;- df_soilc |&gt; \n  group_by(lon, lat) |&gt; \n  nest() |&gt; \n  mutate(\n    soilc_changerate = map_dbl(data, ~get_changerate(.)),\n    soilc_mean = map_dbl(data, ~get_mean(.))\n    ) |&gt; \n  select(-data)   # to make object smaller again\n\nThe global pattern of peatland soil C mean and the rate of change are visualised below.\n\n\nCode\n# load global coastline data\nworld &lt;- ne_coastline(scale = \"small\", returnclass = \"sf\")\n\n# mean\nsoilc_mean &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_soilc_nested, \n    aes(x = lon, y = lat, fill = soilc_mean*1e-3),\n    show.legend = TRUE\n    ) +\n  scale_fill_batlowW(reverse = TRUE, name = expression(paste(\"Soil C \\n(kgC m\"^-2, \")\"))) +  # Reverse the \"lapaz\" color scale\n  theme_void() +\n  theme(\n    legend.position = \"right\", # Position the legend at the bottom of the plot\n    legend.title = element_text(size = 10), # Adjust title font size\n    legend.text = element_text(size = 8),    # Adjust legend text size\n    panel.background = element_rect(fill = \"grey70\", color = NA)\n  ) +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.05) +  # Continent outlines\n  ylim(-55, 80) + \n  xlim(-180, 180)\n\n# changerate\nsoilc_changerate &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_soilc_nested, \n    aes(x = lon, y = lat, fill = soilc_changerate),\n    show.legend = TRUE\n    ) +\n  scale_fill_vik(\n    name = expression(paste(\"Soil C change \\n(gC m\"^-2, \" yr\"^-1, \")\")),\n    reverse = TRUE\n    ) +\n  theme_void() +\n  theme(\n    legend.position = \"right\", # Position the legend at the bottom of the plot\n    legend.title = element_text(size = 10), # Adjust title font size\n    legend.text = element_text(size = 8),    # Adjust legend text size\n    panel.background = element_rect(fill = \"grey70\", color = NA)\n  ) +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.05) +  # Continent outlines\n  ylim(-55, 80) + \n  xlim(-180, 180)\n\nplot_grid(soilc_mean, soilc_changerate, ncol = 1, labels = c(\"a\", \"b\"))\n\n\n\n\n\nFigure 4.2: Peatland soil C mean (a) and range of change (b) from simulations with the LPX-Bern model.\n\n\n\n\n\n\n4.1.3 Combining criteria\nLet’s combine the criteria following Stocker, Spahni, and Joos (2014), as illustrated by Figure 4.3.\n\n\n\n\n\nFigure 4.3: Criteria for peatland definition following DYPTOP. Taken from Stocker, Spahni, and Joos (2014).\n\n\n\n\nThis is implemented by the function get_peat_crit() as specified below.\n\n# for creating labels\nget_peat_crit_labels &lt;- function(ai, soilc_changerate, soilc_mean){\n  ifelse(\n    ai &gt; 1,\n    ifelse(\n      soilc_changerate &gt; 10,\n      \"C accumulation ok\",\n      ifelse(\n        soilc_mean &gt; 50000,\n        \"C stock ok\",\n        \"C stock too low\")\n    ),\n    \"too dry\"\n  )\n}\n\n# for creating booleans\nget_peat_crit &lt;- function(ai, soilc_changerate, soilc_mean){\n  ifelse(\n    ai &gt; 1,\n    ifelse(\n      soilc_changerate &gt; 10,\n      TRUE,\n      ifelse(\n        soilc_mean &gt; 50000,\n        TRUE,\n        FALSE)\n    ),\n    FALSE\n  )\n}\n\nLet’s combine the data frames containing soil C outputs and P/PET into a single data frame and apply get_peat_crit() for determining the global distribution of where peatlands could establish, given sufficient flooding (hence topography).\n\n# merge data frame for potential peatland area fraction ...\ndf_combined &lt;- df_soilc_nested |&gt; \n\n  # ... and with P/PET\n  left_join(\n    as_tibble(rasta_p_over_pet_regr, xy = TRUE, na.rm = TRUE) |&gt; \n      rename(lon = x, lat = y), \n    by = c(\"lon\", \"lat\")\n  )\n\ndf_combined &lt;- df_combined |&gt; \n  mutate(\n    peat_crit_labels = get_peat_crit_labels(ai, soilc_changerate, soilc_mean),\n    peat_crit = get_peat_crit(ai, soilc_changerate, soilc_mean)\n    )\n\nFrom this, we can create a global map that visualises the dominant limiting factor, similar as Fig. 10 in Stocker, Spahni, and Joos (2014).\n\n\nCode\ngg &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_combined, \n    aes(x = lon, y = lat, fill = peat_crit_labels),\n    show.legend = TRUE\n    ) +\n  theme_void() +\n  theme(\n    legend.position = \"right\", # Position the legend at the bottom of the plot\n    legend.title = element_text(size = 10), # Adjust title font size\n    legend.text = element_text(size = 8),    # Adjust legend text size\n    panel.background = element_rect(fill = \"grey70\", color = NA)\n  ) +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.05) +  # Continent outlines\n  ylim(-55, 80) + \n  xlim(-180, 180) +\n  scale_fill_manual(\n    name = \"\",\n    values = c(\n      \"too dry\" = \"wheat3\",\n      \"C accumulation ok\" = \"dodgerblue4\",\n      \"C stock ok\" = \"dodgerblue1\",\n      \"C stock too low\" = \"wheat4\"\n    )\n  )\n\ngg\n\n\n\n\n\nFigure 4.4: The decisive limiting factor limiting peatland establishment."
  },
  {
    "objectID": "peatlands.html#potential-peatland-area",
    "href": "peatlands.html#potential-peatland-area",
    "title": "4  Global peatlands",
    "section": "4.2 Potential peatland area",
    "text": "4.2 Potential peatland area\nIn DYPTOP, the history of monthly flooded area fractions \\(\\Psi(m)\\) determines the potential peatland area fraction \\(f_\\text{peat}^\\text{pot}\\). The minimum of the 18 highest values \\(\\Psi(m)\\) over the preceding 31 years is used to determine \\(f_\\text{peat}^\\text{pot}\\). In this tutorial, we don’t have access to monthly global model outputs for 31 years due to file storage limitations. Hence, for demonstration purposes, we use the 3rd highest monthly value of the flooded area fraction, calculated in Chapter 3 from a mean seasonal cycle of water table depth model outputs. Taking the 3rd highest value accounts for the requirement of a certain persistency of flooding. This yields the global distribution of the potential peatland area fraction, shown in Figure 4.5.\n\ndf_wtd_fflooded &lt;- read_csv(here(\"data/df_wtd_fflooded.csv\"))\n\nRows: 192120 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (9): lon, lat, month, wtd, K_PAR, XM_PAR, V_PAR, MAXF, fflooded\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntake_third_highest &lt;- function(vec){\n  rev(sort(vec))[3]\n}\n\ndf_peat &lt;- df_wtd_fflooded |&gt; \n  group_by(lon, lat) |&gt; \n  summarise(fpeat_pot = take_third_highest(fflooded), .groups = \"drop\")\n\n\n\nCode\n# potential peatland area fraction\ngg &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_peat, \n    aes(x = lon, y = lat, fill = fpeat_pot),\n    show.legend = TRUE\n    ) +\n  scale_fill_batlowW(\n    reverse = TRUE, \n    name = expression(paste(italic(\"f\")[peat]^\"pot\"))\n    ) +  # Reverse the \"lapaz\" color scale\n  theme_void() +\n  theme(\n    legend.position = \"right\", # Position the legend at the bottom of the plot\n    legend.title = element_text(size = 10), # Adjust title font size\n    legend.text = element_text(size = 8),    # Adjust legend text size\n    panel.background = element_rect(fill = \"grey70\", color = NA)\n  ) +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.05) +  # Continent outlines\n  ylim(-55, 80) + \n  xlim(-180, 180)\n\ngg\n\n\n\n\n\nFigure 4.5: Potential peatland area fraction."
  },
  {
    "objectID": "peatlands.html#actual-peatland-area-fraction",
    "href": "peatlands.html#actual-peatland-area-fraction",
    "title": "4  Global peatlands",
    "section": "4.3 Actual peatland area fraction",
    "text": "4.3 Actual peatland area fraction\nTo get from the potential to the actual peatland area fraction, we combine the peatland criteria (Section 4.1) and an additional temporal memory. DGVMs are dynamic models. That is, they simulate the temporal evolution of the terrestrial biosphere and landscape portions. The lateral expansion of peatlands cannot be assumed to be instantaneous. Therefore, the relative area change rate is assumed to be limited to 1% yr-1. This dynamic limitation is ignored in this tutorial since we are merely considering a mean seasonal cycle. Hence, let’s just combine the peatland criteria and \\(f_\\text{peat}^\\text{pot}\\) to get sort of a steady-state actual peatland area fraction, shown in Figure 4.6.\n\n# merge data frame for potential peatland area fraction ...\ndf_combined2 &lt;- df_combined |&gt; \n  \n  # ... with soil C outputs\n  left_join(\n    df_peat, \n    by = c(\"lon\", \"lat\")\n  )\n  \nget_fpeat_act &lt;- function(fpeat_pot, peat_crit){\n  ifelse(\n    peat_crit,\n    fpeat_pot,\n    0\n  )\n}\n\ndf_combined2 &lt;- df_combined2 |&gt; \n  mutate(fpeat_act = get_fpeat_act(fpeat_pot, peat_crit))\n\n\n\nCode\n# actual peatland area fraction\ngg &lt;- ggplot() +\n\n  # Add elevation layer\n  geom_raster(\n    data = df_combined2, \n    aes(x = lon, y = lat, fill = fpeat_act),\n    show.legend = TRUE\n    ) +\n  scale_fill_batlowW(\n    reverse = TRUE, \n    name = expression(paste(italic(\"f\")[peat]))\n    ) +  # Reverse the \"lapaz\" color scale\n  theme_void() +\n  theme(\n    legend.position = \"right\", # Position the legend at the bottom of the plot\n    legend.title = element_text(size = 10), # Adjust title font size\n    legend.text = element_text(size = 8),    # Adjust legend text size\n    panel.background = element_rect(fill = \"grey70\", color = NA)\n  ) +\n  coord_fixed() +\n  geom_sf(data = world, fill = NA, color = \"black\", size = 0.05) +  # Continent outlines\n  ylim(-55, 80) + \n  xlim(-180, 180)\n\ngg\n\n\n\n\n\nFigure 4.6: Actual peatland area fraction.\n\n\n\n\n\n\n\n\nStocker, B. D., R. Spahni, and F. Joos. 2014. “DYPTOP: a cost-efficient TOPMODEL implementation to simulate sub-grid spatio-temporal dynamics of global wetlands and peatlands.” Geoscientific Model Development 7 (6): 3089–3110. https://doi.org/10.5194/gmd-7-3089-2014.\n\n\nZomer, Robert J., Jianchu Xu, and Antonio Trabucco. 2022. “Version 3 of the Global Aridity Index and Potential Evapotranspiration Database.” Scientific Data 9 (1): 409. https://doi.org/10.1038/s41597-022-01493-1."
  },
  {
    "objectID": "exercises.html#completing-dyptop",
    "href": "exercises.html#completing-dyptop",
    "title": "5  Exercises",
    "section": "5.1 Completing DYPTOP",
    "text": "5.1 Completing DYPTOP\nThe description of the model in Chapter 2 is incomplete. An additional point is considered for determining the flooded area fraction as a function of the water table depth in the work by Stocker, Spahni, and Joos (2014). Which one? Complement the model and revise Figure 2.5, visualising the additional constraint.\nYou can find all code shown and data used in this tutorial here (code in .qmd files stored under book/, data in data/)."
  },
  {
    "objectID": "exercises.html#improving-the-global-peatland-prediction",
    "href": "exercises.html#improving-the-global-peatland-prediction",
    "title": "5  Exercises",
    "section": "5.2 Improving the global peatland prediction",
    "text": "5.2 Improving the global peatland prediction\nThe predicted global distribution of the actual peatland area fraction shown in Figure 4.6 some major northern peatland complexes, including the Hudson Bay Lowland and the West Siberian Lowlands. In other regions, the map suggests excessive peatland areas (e.g., Amazon). Modify model parameters to improve the correspondence between predicted and observed global peatland areas. As observations, you may consider the global peatland map PEATMAP, shown e.g., here.\n\n\n\n\n\n\nPro-tip\n\n\n\nFork and clone the GitHub repository and open it as a project in RStudio. This lets you run the code shown in the tutorial and render the HTML output hosted on the tutorial’s website.\n\n\n\n\n\n\nStocker, B. D., R. Spahni, and F. Joos. 2014. “DYPTOP: a cost-efficient TOPMODEL implementation to simulate sub-grid spatio-temporal dynamics of global wetlands and peatlands.” Geoscientific Model Development 7 (6): 3089–3110. https://doi.org/10.5194/gmd-7-3089-2014."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Beven, K. J., and M. J. Kirkby. 1979. “A Physically Based,\nVariable Con- Tributing Area Model of Basin Hydrology.”\nHydrol. Sci. J. 24 (1): 43–69. https://doi.org/DOI:10.1080/02626667909491834.\n\n\nDargie, Greta C., Simon L. Lewis, Ian T. Lawson, Edward T. A. Mitchard,\nSusan E. Page, Yannick E. Bocko, and Suspense A. Ifo. 2017. “Age,\nExtent and Carbon Storage of the Central Congo\nBasin Peatland Complex.” Nature 542 (7639):\n86–90. https://doi.org/10.1038/nature21048.\n\n\nMarthews, T. R., S. J. Dadson, B. Lehner, S. Abele, and N. Gedney. 2015.\n“High-Resolution Global Topographic Index Values for Use in\nLarge-Scale Hydrological Modelling.” Hydrology and Earth\nSystem Sciences 19 (1): 91–104. https://doi.org/10.5194/hess-19-91-2015.\n\n\nStocker, B. D., R. Spahni, and F. Joos. 2014. “DYPTOP: a cost-efficient TOPMODEL implementation to\nsimulate sub-grid spatio-temporal dynamics of global wetlands and\npeatlands.” Geoscientific Model Development 7\n(6): 3089–3110. https://doi.org/10.5194/gmd-7-3089-2014.\n\n\nZomer, Robert J., Jianchu Xu, and Antonio Trabucco. 2022. “Version\n3 of the Global Aridity Index and\nPotential Evapotranspiration\nDatabase.” Scientific Data 9 (1): 409. https://doi.org/10.1038/s41597-022-01493-1."
  }
]